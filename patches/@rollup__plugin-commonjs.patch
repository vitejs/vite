diff --git a/dist/cjs/index.js b/dist/cjs/index.js
index 91d0dae6ae94c70ca876867a67fd8e71a13fb3a1..c89f07ee58bc40c5c258cfbd17843a4df97c438d 100644
--- a/dist/cjs/index.js
+++ b/dist/cjs/index.js
@@ -841,17 +841,18 @@ function getRequireResolver(extensions, detectCyclesAndConditional, currentlyRes
           // Special-case external Node built-ins to be handled via a lazy __require
           // helper instead of hoisted ESM imports when strict wrapping is used.
           const isExternalWrapped = isWrappedId(dependencyId, EXTERNAL_SUFFIX);
-          if (
-            parentMeta.initialCommonJSType === IS_WRAPPED_COMMONJS &&
-            !allowProxy &&
-            isExternalWrapped
-          ) {
-            const actualExternalId = unwrapId(dependencyId, EXTERNAL_SUFFIX);
-            if (actualExternalId.startsWith('node:')) {
-              isCommonJS = IS_WRAPPED_COMMONJS;
-              parentMeta.isRequiredCommonJS[dependencyId] = isCommonJS;
-            }
-          }
+          // NOTE: revert #1909 for https://github.com/vitejs/vite/issues/20983
+          // if (
+          //   parentMeta.initialCommonJSType === IS_WRAPPED_COMMONJS &&
+          //   !allowProxy &&
+          //   isExternalWrapped
+          // ) {
+          //   const actualExternalId = unwrapId(dependencyId, EXTERNAL_SUFFIX);
+          //   if (actualExternalId.startsWith('node:')) {
+          //     isCommonJS = IS_WRAPPED_COMMONJS;
+          //     parentMeta.isRequiredCommonJS[dependencyId] = isCommonJS;
+          //   }
+          // }
           const isWrappedCommonJS = isCommonJS === IS_WRAPPED_COMMONJS;
           fullyAnalyzedModules[dependencyId] = true;
           const moduleInfo =
@@ -2306,9 +2307,10 @@ function commonjs(options = {}) {
 
       if (isWrappedId(id, EXTERNAL_SUFFIX)) {
         const actualId = unwrapId(id, EXTERNAL_SUFFIX);
-        if (actualId.startsWith('node:')) {
-          return getExternalBuiltinRequireProxy(actualId);
-        }
+        // NOTE: revert #1909 for https://github.com/vitejs/vite/issues/20983
+        // if (actualId.startsWith('node:')) {
+        //   return getExternalBuiltinRequireProxy(actualId);
+        // }
         return getUnknownRequireProxy(
           actualId,
           isEsmExternal(actualId) ? getRequireReturnsDefault(actualId) : true
diff --git a/dist/es/index.js b/dist/es/index.js
index 633c983bb68764714e03aa969443640428885052..f05b8a929349e3776eb03cc600d9f6309550414d 100644
--- a/dist/es/index.js
+++ b/dist/es/index.js
@@ -837,17 +837,18 @@ function getRequireResolver(extensions, detectCyclesAndConditional, currentlyRes
           // Special-case external Node built-ins to be handled via a lazy __require
           // helper instead of hoisted ESM imports when strict wrapping is used.
           const isExternalWrapped = isWrappedId(dependencyId, EXTERNAL_SUFFIX);
-          if (
-            parentMeta.initialCommonJSType === IS_WRAPPED_COMMONJS &&
-            !allowProxy &&
-            isExternalWrapped
-          ) {
-            const actualExternalId = unwrapId(dependencyId, EXTERNAL_SUFFIX);
-            if (actualExternalId.startsWith('node:')) {
-              isCommonJS = IS_WRAPPED_COMMONJS;
-              parentMeta.isRequiredCommonJS[dependencyId] = isCommonJS;
-            }
-          }
+          // NOTE: revert #1909 for https://github.com/vitejs/vite/issues/20983
+          // if (
+          //   parentMeta.initialCommonJSType === IS_WRAPPED_COMMONJS &&
+          //   !allowProxy &&
+          //   isExternalWrapped
+          // ) {
+          //   const actualExternalId = unwrapId(dependencyId, EXTERNAL_SUFFIX);
+          //   if (actualExternalId.startsWith('node:')) {
+          //     isCommonJS = IS_WRAPPED_COMMONJS;
+          //     parentMeta.isRequiredCommonJS[dependencyId] = isCommonJS;
+          //   }
+          // }
           const isWrappedCommonJS = isCommonJS === IS_WRAPPED_COMMONJS;
           fullyAnalyzedModules[dependencyId] = true;
           const moduleInfo =
@@ -2302,9 +2303,10 @@ function commonjs(options = {}) {
 
       if (isWrappedId(id, EXTERNAL_SUFFIX)) {
         const actualId = unwrapId(id, EXTERNAL_SUFFIX);
-        if (actualId.startsWith('node:')) {
-          return getExternalBuiltinRequireProxy(actualId);
-        }
+        // NOTE: revert #1909 for https://github.com/vitejs/vite/issues/20983
+        // if (actualId.startsWith('node:')) {
+        //   return getExternalBuiltinRequireProxy(actualId);
+        // }
         return getUnknownRequireProxy(
           actualId,
           isEsmExternal(actualId) ? getRequireReturnsDefault(actualId) : true
